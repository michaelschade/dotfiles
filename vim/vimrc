filetype off

let g:pathogen_disabled = []
if system('cat /proc/device-tree/model') =~# "Raspberry Pi"
  call add(g:pathogen_disabled, 'YouCompleteMe')
  call add(g:pathogen_disabled, 'ultisnips')
endif
call pathogen#infect()
call pathogen#helptags()

filetype plugin indent on

set background=dark
if has('gui_running')
  colorscheme wombat
else
  colorscheme monokai
endif

syntax on
set nocompatible
set nowrap
set autoindent
set smartindent
set tabstop=2
set shiftwidth=2
set incsearch
set number
set formatoptions=1
set lbr
set expandtab
set smarttab
set nohlsearch
set ignorecase
set smartcase
set nobackup
set backspace=indent,eol,start
set clipboard=unnamed
set directory=~/.vimswap
set so=5 " Keep 5 lines above/below cursor always
nnoremap ; :
set list listchars=tab:»·,trail:·
set viminfo=%,'50,f1,\"100,n~/.viminfo
set foldmethod=indent " Folding
set foldlevelstart=99
nnoremap \zz :let &scrolloff=999-&scrolloff<CR>
let mapleader=","

" 80 Columns Is Best
match ErrorMsg '\%>80v.\+'

" golang
augroup FileType go
  set nolist

  " auto importing
  let g:go_fmt_command = "goimports"

  " synta highlighting
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_structs = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_build_constraints = 1

  " building and running
  nmap <leader>gr <Plug>(go-run)
  nmap <leader>gb <Plug>(go-build)
  nmap <leader>gt <Plug>(go-test)
  nmap <leader>gc <Plug>(go-coverage)
  nmap <leader>gI <Plug>(go-install)

  " documentation
  nmap <Leader>gs  <Plug>(go-def)
  nmap <Leader>gSs <Plug>(go-def-split)
  nmap <Leader>gSv <Plug>(go-def-vertical)
  nmap <Leader>gd  <Plug>(go-doc)
  nmap <Leader>gv  <Plug>(go-doc-vertical)
  nmap <Leader>gi  <Plug>(go-implements)
augroup END

" BufExplorer
nmap <leader>b :BufExplorer<CR>

" Shell
map <leader>s  :match<CR>:set nolist<CR>:ConqueTerm zsh<CR>
map <leader>sh :match<CR>:set nolist<CR>:ConqueTermSplit zsh<CR>
map <leader>sv :match<CR>:set nolist<CR>:ConqueTermVSplit zsh<CR>

" JSON Syntax Highlighting
" via http://www.vim.org/scripts/script.php?script_id=1945
augroup json_autocmd
  autocmd!
  autocmd FileType json set autoindent
  autocmd FileType json set formatoptions=tcq2l
  autocmd FileType json set textwidth=78 shiftwidth=2
  autocmd FileType json set softtabstop=2 tabstop=2
  autocmd FileType json set expandtab
  autocmd FileType json set foldmethod=syntax
augroup END

" misc maps
map U :redo<CR>

" NERD Tree
map <leader>n :NERDTree<CR>
"autoload NERD tree
"autocmd vimenter * if !argc() | NERDTree | endif
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" taglist
map <leader>l :TagbarToggle<CR>

" fugitive
map <leader>Gb :Gblame<CR>
map <leader>Gc :Gcommit<CR>
map <leader>Gw :Gwrite<CR>
map <leader>Gr :Gread<CR>
map <leader>Gs :Gstatus<CR>
map <leader>Gd :Gdiff<CR>
map <leader>Gp :diffput<CR>
map <leader>Gg :diffget<CR>
map <leader>Gu :diffupdate<CR>

" window management
map + <C-W>+
map - <C-W>-
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
map <C-x> <C-w>x
map <C-r> <C-w>r
map <C-R> <C-w>R

" tab management
map <C-t> gt
map <C-T> gT

map <C-n> <C-w><
map <C-m> <C-w>>

" fuzzy search
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ackprg = 'ag --vimgrep'

" make ultisnips and youcompleteme play nice
"let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<c-n>'
let g:UltiSnipsExpandTrigger = "<c-n>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
